{"version":3,"sources":["LinkInterceptor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LinkInterceptor","html","onLinkClick","ref","useRef","listeners","useEffect","Array","from","current","querySelectorAll","forEach","node","addEventListener","push","removeEventListener","Typography","variant","component","dangerouslySetInnerHTML","__html","useStyles","makeStyles","theme","createStyles","root","padding","display","alignItems","width","input","marginLeft","spacing","flex","iconButton","divider","height","marginTop","container","margin","speakButton","suggestList","backgroundColor","palette","background","paper","snackbar","error","dark","App","classes","useState","data","setData","keyword","setKeyword","type","setType","message","setMessage","search","inputKeyword","a","fetch","toLocaleLowerCase","ft","json","console","log","dict","playSound","word","accent","url","Audio","play","content","replace","Fragment","CssBaseline","Container","fixed","style","paddingBottom","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Grid","className","item","sm","xs","onSubmit","e","preventDefault","Paper","InputBase","value","onChange","target","placeholder","inputProps","onClick","Divider","orientation","ToggleButtonGroup","exclusive","event","newAlignment","float","ToggleButton","Box","pronounce","Chip","clickable","icon","label","arr","currentTarget","href","split","length","suggests","List","map","ListItem","key","button","ListItemIcon","ListItemText","primary","SnackbarContent","action","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9cd695d5.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { Typography } from '@material-ui/core'\n\nexport function LinkInterceptor({ html, onLinkClick = () => { } }: { html: string, onLinkClick: (e: any) => void }) {\n  const ref = useRef(null)\n  const listeners = useRef([])\n\n  useEffect(\n    () => {\n      const links: HTMLElement[] = Array.from(ref.current.querySelectorAll('a'))\n      links.forEach(node => {\n        node.addEventListener('click', onLinkClick)\n        listeners.current.push(node)\n      })\n\n      return () => {\n        listeners.current.forEach(node =>\n          node.removeEventListener('click', onLinkClick)\n        )\n        listeners.current = []\n      }\n    },\n    [html, onLinkClick]\n  )\n\n  return <Typography ref={ref} variant=\"body1\" component=\"article\" dangerouslySetInnerHTML={{ __html: html }}></Typography>\n}","import React, { useState, FormEvent } from \"react\";\nimport \"./App.css\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport {\n  Box,\n  Grid,\n  Paper,\n  IconButton,\n  InputBase,\n  Divider,\n  Chip,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  AppBar,\n  Toolbar,\n  SnackbarContent,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport DirectionsIcon from \"@material-ui/icons/Directions\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport TranslateIcon from \"@material-ui/icons/Translate\";\nimport SwapHorizIcon from \"@material-ui/icons/SwapHoriz\";\nimport AccountTreeIcon from \"@material-ui/icons/AccountTree\";\nimport VolumeDownIcon from \"@material-ui/icons/VolumeDown\";\nimport VolumeUpIcon from \"@material-ui/icons/VolumeUp\";\nimport { LinkInterceptor } from \"./LinkInterceptor\";\nimport LabelImportantIcon from \"@material-ui/icons/LabelImportant\";\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\n\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: \"2px 4px\",\n      display: \"flex\",\n      alignItems: \"center\",\n      width: \"100%\"\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1\n    },\n    iconButton: {\n      padding: 10\n    },\n    divider: {\n      height: 1,\n      marginTop: theme.spacing(1)\n    },\n    container: {\n      margin: theme.spacing(1, 0)\n    },\n    speakButton: {\n      marginLeft: theme.spacing(3)\n    },\n    suggestList: {\n      backgroundColor: theme.palette.background.paper,\n      marginTop: theme.spacing(5)\n    },\n    snackbar: {\n      backgroundColor: theme.palette.error.dark,\n    }\n  })\n);\n\nconst App: React.FC = () => {\n  const classes = useStyles({});\n  const [data, setData] = useState({});\n  const [keyword, setKeyword] = useState(\"\");\n  const [type, setType] = useState(\"en_vn\");\n  const [message, setMessage] = useState(null);\n\n  const search = async (inputKeyword: string) => {\n    try {\n      const ft = await fetch(\n        `https://samuraitruong.github.io/open-vn-en-dict/html/${inputKeyword.toLocaleLowerCase()}.json`\n      );\n      const json = await ft.json();\n      console.log(\"datasource\", json);\n      setType(\"en_vn\");\n      setData(json);\n      setMessage(null)\n    } catch {\n      console.log(\"error loading data\");\n      setData({});\n      setMessage(\"Xin lỗi, từ bạn tìm kiếm không tồn tại hoặc chưa được cập nhật\")\n    }\n  };\n  const dict = (data as any)[type];\n  const handleTypeChange = (\n    event: React.MouseEvent<HTMLElement>,\n    newAlignment: string\n  ) => {\n    setType(newAlignment);\n  };\n  const handleSubmit = (e: FormEvent) => {\n    search(keyword);\n    e.preventDefault();\n    return false;\n  };\n  const playSound = (word?: string, accent?: \"us\" | \"uk\") => {\n    const url = `https://samuraitruong.github.io/open-vn-en-dict/voice/${word.toLocaleLowerCase()}_${accent}.mp3`;\n    const audio = new Audio(url);\n    audio.play();\n  };\n  if (dict && dict.data && dict.data.content) {\n    dict.data.content = dict.data.content.replace(\n      /find\\?type=(\\d+)&amp;query=(.*)/gi,\n      \"$2\"\n    );\n  }\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container fixed style={{ paddingBottom: \"50px\" }}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n              <MenuBookIcon />\n            </IconButton>\n            <Typography variant=\"h6\">Vietnamese - English open dictionary</Typography>\n          </Toolbar>\n        </AppBar>\n        <Grid container className={classes.container}>\n          <Grid item sm={6} xs={12}>\n            <form onSubmit={handleSubmit}>\n              <Paper className={classes.root}>\n                <IconButton className={classes.iconButton} aria-label=\"menu\">\n                  <MenuIcon />\n                </IconButton>\n                <InputBase\n                  value={keyword}\n                  onChange={e => setKeyword(e.target.value)}\n                  className={classes.input}\n                  placeholder=\"English -> Vietnamese\"\n                  inputProps={{ \"aria-label\": \"English -> Vietnamese\" }}\n                />\n                <IconButton\n                  type=\"submit\"\n                  className={classes.iconButton}\n                  aria-label=\"search\"\n                  onClick={() => search(keyword)}\n                >\n                  <SearchIcon />\n                </IconButton>\n                <Divider className={classes.divider} orientation=\"vertical\" />\n                <IconButton\n                  color=\"primary\"\n                  className={classes.iconButton}\n                  aria-label=\"directions\"\n                >\n                  <DirectionsIcon />\n                </IconButton>\n              </Paper>\n            </form>\n          </Grid>\n          <Grid item sm={6} xs={12}>\n            <ToggleButtonGroup\n              value={type}\n              exclusive\n              onChange={handleTypeChange}\n              style={{ float: \"right\" }}\n              aria-label=\"text alignment\"\n            >\n              <ToggleButton value=\"en_vn\" aria-label=\"left aligned\">\n                <TranslateIcon></TranslateIcon> Eng -> Vi &nbsp;\n              </ToggleButton>\n              <ToggleButton value=\"en_en\" aria-label=\"centered\">\n                <SwapHorizIcon /> Eng -> Eng &nbsp;\n              </ToggleButton>\n              <ToggleButton value=\"synonyms\" aria-label=\"right aligned\">\n                <AccountTreeIcon /> Đồng Thanh\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </Grid>\n        </Grid>\n        {dict && (\n          <Grid>\n            <Grid xs={12} item>\n              <Typography variant=\"h3\" component=\"span\">\n                {dict.data ? dict.data.word : \"\"}\n              </Typography>\n              <Typography variant=\"h4\" component=\"span\">\n                <Box color=\"grey\" component=\"span\">\n                  {dict.data ? `(${dict.data.pronounce})` : \"\"}\n                </Box>\n              </Typography>\n              <Box component=\"span\" className=\"float-right\">\n                <Chip\n                  className={classes.speakButton}\n                  clickable\n                  color=\"primary\"\n                  onClick={() => playSound(dict.data.word, \"us\")}\n                  icon={<VolumeDownIcon />}\n                  label=\"US\"\n                />\n                <Chip\n                  className={classes.speakButton}\n                  clickable\n                  color=\"secondary\"\n                  onClick={() => playSound(dict.data.word, \"uk\")}\n                  icon={<VolumeUpIcon />}\n                  label=\"UK\"\n                />\n              </Box>\n              <Divider className={classes.divider} />\n              <LinkInterceptor\n                html={dict.data && dict.data.content}\n                onLinkClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\n                  console.log(e);\n                  e.preventDefault();\n                  const arr = e.currentTarget.href.split(\"/\");\n                  const word = arr[arr.length - 1];\n                  setKeyword(word);\n                  search(word);\n                }}\n              />\n              {dict.suggests && (\n                <Grid className={classes.suggestList}>\n                  <Typography variant=\"h3\" component=\"h3\">\n                    {\" \"}\n                    Từ liên quan:\n                  </Typography>\n                  <List\n                    component=\"nav\"\n                    className={classes.suggestList}\n                    aria-label=\"contacts\"\n                  >\n                    {dict.suggests.map((item: any) => (\n                      <ListItem\n                        key={item.word}\n                        button\n                        onClick={() => {\n                          setKeyword(item.word);\n                          search(item.word);\n                        }}\n                      >\n                        <ListItemIcon>\n                          <LabelImportantIcon />\n                        </ListItemIcon>\n                        <ListItemText primary={item.word} color=\"primary\" />\n                      </ListItem>\n                    ))}\n                  </List>\n                </Grid>\n              )}\n            </Grid>\n          </Grid>\n        )}\n\n        {message && (\n          <SnackbarContent className={classes.snackbar} message={message} action={<IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={() => setMessage(null)}>\n            <CloseIcon />\n          </IconButton>} />\n        )}\n      </Container>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}