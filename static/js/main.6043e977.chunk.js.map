{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","padding","display","alignItems","width","input","marginLeft","spacing","flex","iconButton","divider","height","marginTop","container","margin","speakButton","suggestList","backgroundColor","palette","background","paper","App","classes","useState","data","setData","keyword","setKeyword","type","setType","search","inputKeyword","a","fetch","toLocaleLowerCase","ft","json","console","log","dict","playSound","word","accent","url","Audio","play","Fragment","CssBaseline","Container","fixed","style","paddingBottom","Typography","component","variant","Box","bgcolor","color","p","Grid","className","item","sm","onSubmit","e","preventDefault","Paper","IconButton","aria-label","InputBase","value","onChange","target","placeholder","inputProps","onClick","Divider","orientation","ToggleButtonGroup","exclusive","event","newAlignment","float","ToggleButton","xs","pronounce","Chip","clickable","icon","label","dangerouslySetInnerHTML","__html","content","suggests","List","map","ListItem","key","button","ListItemIcon","ListItemText","primary","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6043e977.chunk.js","sourcesContent":["import React, { useState, FormEvent } from 'react';\r\nimport './App.css';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport { Box, Grid, Paper, IconButton, InputBase, Divider, Chip, List, ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport DirectionsIcon from '@material-ui/icons/Directions';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport TranslateIcon from '@material-ui/icons/Translate';\r\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\r\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\r\nimport VolumeDownIcon from '@material-ui/icons/VolumeDown';\r\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\r\nimport LabelImportantIcon from '@material-ui/icons/LabelImportant';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      padding: '2px 4px',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      width: \"100%\",\r\n    },\r\n    input: {\r\n      marginLeft: theme.spacing(1),\r\n      flex: 1,\r\n    },\r\n    iconButton: {\r\n      padding: 10,\r\n    },\r\n    divider: {\r\n      height: 1,\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    container: {\r\n      margin: theme.spacing(1, 0),\r\n    },\r\n    speakButton: {\r\n      marginLeft: theme.spacing(3)\r\n    },\r\n    suggestList: {\r\n      backgroundColor:  theme.palette.background.paper,\r\n      marginTop: theme.spacing(5)\r\n    }\r\n  }),\r\n);\r\n\r\n\r\nconst App: React.FC = () => {\r\n  const classes = useStyles({});\r\n  const [data, setData] = useState({ });\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  const [type, setType] = useState(\"en_vn\");\r\n  const [message, setMessage] = useState(null);\r\n\r\n  const search = async (inputKeyword: string) => {\r\n    try{\r\n      const ft = await fetch(`https://samuraitruong.github.io/open-vn-en-dict/html/${inputKeyword.toLocaleLowerCase()}.json`);\r\n      const json = await ft.json();\r\n      console.log(\"datasource\", json);\r\n      setType(\"en_vn\")\r\n      setData(json);\r\n    }\r\n    catch{\r\n      console.log(\"error loading data\");\r\n      setData({});\r\n    }\r\n  }\r\n  const dict = (data as any)[type];\r\n  const handleTypeChange = (event: React.MouseEvent<HTMLElement>, newAlignment: string) => {\r\n    setType(newAlignment);\r\n  };\r\n  const handleSubmit = (e: FormEvent) => {\r\n    search(keyword);\r\n    e.preventDefault()\r\n    return  false;\r\n  }\r\n  const playSound = (word?: string , accent? : \"us\"| \"uk\")=> {\r\n    const url =`https://samuraitruong.github.io/open-vn-en-dict/voice/${word.toLocaleLowerCase()}_${accent}.mp3`\r\n    const audio = new Audio(url);\r\n    audio.play();\r\n  } \r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Container fixed style={{paddingBottom: \"50px\"}}>\r\n        <Typography component=\"div\" variant=\"body1\">\r\n          <Box bgcolor=\"primary.main\" color=\"primary.contrastText\" p={2}>\r\n            Vietnamese - English open dictionary\r\n      </Box>\r\n        </Typography>\r\n        <Grid container spacing={3} className={classes.container}>\r\n          <Grid item sm={6}>\r\n            <form onSubmit={handleSubmit}>\r\n\r\n              <Paper className={classes.root}>\r\n                <IconButton className={classes.iconButton} aria-label=\"menu\">\r\n                  <MenuIcon />\r\n                </IconButton>\r\n                <InputBase\r\n\r\n                  value={keyword}\r\n                  onChange={(e) => setKeyword(e.target.value)}\r\n                  className={classes.input}\r\n                  placeholder=\"English -> Vietnamese\"\r\n                  inputProps={{ 'aria-label': 'English -> Vietnamese' }}\r\n                />\r\n                <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\" onClick={() => search(keyword)}>\r\n                  <SearchIcon />\r\n                </IconButton>\r\n                <Divider className={classes.divider} orientation=\"vertical\" />\r\n                <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"directions\">\r\n                  <DirectionsIcon />\r\n                </IconButton>\r\n              </Paper>\r\n            </form>\r\n          </Grid>\r\n          <Grid item sm={6}>\r\n            <ToggleButtonGroup\r\n              value={type}\r\n              exclusive\r\n              onChange={handleTypeChange}\r\n              style={{ float: \"right\" }}\r\n              aria-label=\"text alignment\"\r\n            >\r\n              <ToggleButton value=\"en_vn\" aria-label=\"left aligned\">\r\n                <TranslateIcon></TranslateIcon> Eng -> Vi &nbsp;\r\n              </ToggleButton>\r\n              <ToggleButton value=\"en_en\" aria-label=\"centered\">\r\n                <SwapHorizIcon /> Eng -> Eng &nbsp;\r\n              </ToggleButton>\r\n              <ToggleButton value=\"synonyms\" aria-label=\"right aligned\">\r\n                <AccountTreeIcon />  Đồng Thanh\r\n              </ToggleButton>\r\n\r\n            </ToggleButtonGroup>\r\n          </Grid>\r\n        </Grid>\r\n\r\n\r\n        { dict && (\r\n        <Grid>\r\n          <Grid xs={12} item>\r\n          <Typography variant=\"h3\" component=\"span\">\r\n            {dict.data ? dict.data.word : \"\"}\r\n          </Typography>\r\n          <Typography variant=\"h4\" component=\"span\" >\r\n            <Box color=\"grey\" component=\"span\">\r\n            {dict.data ? `(${dict.data.pronounce})`: \"\"}\r\n            </Box>\r\n          </Typography>\r\n          <Box component=\"span\" className=\"float-right\">\r\n            <Chip className={classes.speakButton}\r\n              clickable\r\n              color=\"primary\"\r\n              onClick={() => playSound(dict.data.word, \"us\")}\r\n              icon={<VolumeDownIcon />}\r\n              label=\"US\"/>\r\n              <Chip\r\n              className={classes.speakButton}\r\n              clickable\r\n              color=\"secondary\"\r\n              onClick={() => playSound(dict.data.word, \"uk\")}\r\n              icon={<VolumeUpIcon />}\r\n              label=\"UK\"/>\r\n            </Box>\r\n          <Divider  className={classes.divider}/>\r\n          <Typography variant=\"body1\" component=\"article\" dangerouslySetInnerHTML={{ __html: dict.data ? dict.data.content : \"\" }}>\r\n          </Typography>\r\n          </Grid>\r\n          {dict.suggests && (\r\n          <Grid className={classes.suggestList}>\r\n            <Typography variant=\"h3\" component=\"h3\"> Từ liên quan:\r\n              </Typography>\r\n            <List component=\"nav\" className={classes.suggestList} aria-label=\"contacts\">\r\n              {dict.suggests.map((item: any) => (\r\n              <ListItem key={item.word} button onClick={() => { setKeyword(item.word); search(item.word)}}>\r\n                <ListItemIcon>\r\n                  <LabelImportantIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary={item.word} color=\"primary\" />\r\n              </ListItem>))}\r\n            </List>\r\n\r\n          </Grid>)}\r\n        </Grid>\r\n        )}\r\n      </Container>\r\n    </React.Fragment >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}