{"version":3,"sources":["common/ThemeProvider/index.tsx","components/AppBar/index.tsx","components/SuggestionList/index.tsx","components/LinkInterceptor.tsx","services/util.ts","components/WordPopup/WordPopup.tsx","models/IApiResponse.ts","constants.ts","services/api.ts","containers/Home.tsx","common/App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","Theme","children","CssBaseline","ThemeProvider","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","SuggestionList","suggests","setKeyword","search","classes","useStyles","successtionBox","paddingTop","length","Box","className","suggestList","Divider","component","style","marginTop","List","map","item","ListItem","key","word","button","onClick","ListItemIcon","ListItemText","primary","makeStyles","backgroundColor","palette","background","paper","spacing","LinkInterceptor","html","onLinkClick","onWordClick","ref","useRef","listeners","wordDdCLickHandle","useCallback","text","doc","document","window","getSelection","toString","selection","type","createRange","useEffect","current","push","addEventListener","Array","from","querySelectorAll","forEach","node","removeEventListener","dangerouslySetInnerHTML","__html","toProperCase","input","toUpperCase","substr","ApiResponseTypes","createStyles","appBar","title","marginLeft","flex","innerBox","padding","WordPopup","onClose","Transition","React","forwardRef","props","Slide","direction","handleClose","Dialog","fullScreen","innerWidth","open","TransitionComponent","pronounce","Button","autoFocus","content","e","preventDefault","constants","RESOURCE_URL","process","REACT_APP_RESOURCE_URL","DATA_SOURCE_ID","fetchWord","source","a","result","resultType","Success","toLocaleLowerCase","trim","fetch","response","replace","data","JSON","parse","console","log","Error","errorMessage","root","display","alignItems","width","iconButton","divider","height","container","margin","speakButton","snackbar","error","dark","Home","localStorage","getItem","history","useHistory","useState","sourceId","setSourceId","setData","popupWord","setPopupWord","keyword","setType","message","setMessage","useParams","inputKeyword","clickedWord","en_vn","dict","playSound","accent","url","Audio","play","anchorEl","setAnchorEl","value","some","x","setItem","Fragment","Grid","sm","xs","onSubmit","Paper","event","currentTarget","keepMounted","Boolean","MenuItem","disabled","InputBase","onChange","target","placeholder","inputProps","orientation","ToggleButtonGroup","exclusive","newAlignment","float","ToggleButton","Chip","clickable","icon","label","arr","href","split","SnackbarContent","action","App","basename","Container","fixed","path","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34173b2d.chunk.js","sourcesContent":["import React from \"react\"\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\n\nconst theme = createMuiTheme()\n\nconst Theme: React.FC = ({ children }) => {\n  return (\n    <>\n      <CssBaseline />\n      <ThemeProvider theme={theme}>\n        {children}\n      </ThemeProvider>\n    </>\n  )\n}\n\nexport default Theme\n\n\n\n","import React from \"react\"\n\nimport MuiAppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\n\nimport MenuBookIcon from '@material-ui/icons/MenuBook'\n\nconst AppBar: React.FC = () => {\n  return (\n    <MuiAppBar position=\"static\">\n      <Toolbar>\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n          <MenuBookIcon />\n        </IconButton>\n        <Typography variant=\"h6\">Vietnamese - English open dictionary</Typography>\n      </Toolbar>\n    </MuiAppBar>\n  )\n}\n\nexport default AppBar","import React from 'react'\n\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\n\nimport Typography from \"@material-ui/core/Typography\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport LabelImportantIcon from \"@material-ui/icons/LabelImportant\"\nimport { Box, Divider } from '@material-ui/core'\n\ninterface SuggestionListProps {\n  suggests: any[],\n  setKeyword?: any\n  search?: any\n}\n\nconst SuggestionList: React.FC<SuggestionListProps> = ({ suggests, setKeyword, search }) => {\n  const classes = useStyles({ successtionBox: {paddingTop: \"25px\"}})\n \n  return suggests && suggests.length >0 && (\n    <Box className= {classes.suggestList}>\n      <Divider/>\n      <Typography variant=\"h3\" component=\"h5\" style={{marginTop:\"25px\"}}>\n        Từ liên quan:\n      </Typography>\n      <List\n        component=\"nav\"\n        aria-label=\"contacts\"\n      >\n        {suggests.map((item: any) => (\n          <ListItem\n            key={item.word}\n            button\n            onClick={() => {\n              setKeyword(item.word)\n              search(item.word)\n            }}\n          >\n            <ListItemIcon>\n              <LabelImportantIcon />\n            </ListItemIcon>\n            <ListItemText primary={item.word} color=\"primary\" />\n          </ListItem>\n        ))}\n      </List>\n    </Box>\n  )\n}\n\nexport default SuggestionList\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  suggestList: {\n    backgroundColor: theme.palette.background.paper,\n    marginTop: theme.spacing(5)\n  }\n}))","import React, { useEffect, useRef, useCallback } from 'react'\nimport { Typography } from '@material-ui/core'\nexport interface IInterceptionProps {\n  html: string;\n  onLinkClick: (e: any) => any;\n  onWordClick?: (e: string) => void;\n}\nexport function LinkInterceptor({ html, onLinkClick, onWordClick }: IInterceptionProps) {\n  const ref = useRef(null)\n  const listeners = useRef([])\n  const wordDdCLickHandle = useCallback(() => {\n    let text = \"\";\n    const doc = document as any;\n\n    if (window.getSelection) {\n      text = window.getSelection().toString();\n    } else if (doc.selection && doc.selection.type !== \"Control\") {\n      text = doc.selection.createRange().text;\n    }\n    if (text && onWordClick) {\n      onWordClick(text);\n    }\n  }, [onWordClick]);\n\n  useEffect(\n    () => {\n      listeners.current.push(ref.current);\n      ref.current.addEventListener(\"dblclick\", wordDdCLickHandle)\n      const links: HTMLElement[] = Array.from(ref.current.querySelectorAll('a'))\n      links.forEach(node => {\n        node.addEventListener('click', onLinkClick)\n        listeners.current.push(node)\n      })\n\n      return () => {\n        listeners.current.forEach(node => {\n          node.removeEventListener('click', onLinkClick);\n          node.removeEventListener('dblclick', wordDdCLickHandle);\n        });\n        listeners.current = []\n      }\n    },\n    [html, onLinkClick, onWordClick, wordDdCLickHandle]\n  )\n\n  return <Typography ref={ref} variant=\"body1\" component=\"article\" dangerouslySetInnerHTML={{ __html: html }}></Typography>\n}","export function toProperCase(input: string) {\n  input = input[0].toUpperCase() + input.substr(1);\n  return input;\n}","import {\n  Dialog, AppBar, Toolbar, IconButton, Typography, Button,\n  makeStyles, Theme, createStyles, Slide, Box\n} from \"@material-ui/core\";\n\nimport React from \"react\";\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport { TransitionProps } from '@material-ui/core/transitions';\nimport { LinkInterceptor } from \"components/LinkInterceptor\";\nimport { toProperCase } from \"services/util\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    appBar: {\n      position: 'relative',\n    },\n    title: {\n      marginLeft: theme.spacing(2),\n      flex: 1,\n    },\n    innerBox: {\n      padding: theme.spacing(2)\n    }\n  }),\n);\n\nexport const WordPopup: React.FC<{ word: any, onClose: () => void }> = ({ word, onClose }) => {\n  const classes = useStyles({});\n  const Transition = React.forwardRef<unknown, TransitionProps>(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n  });\n  const handleClose = () => onClose();\n  if (!word) return null;\n\n  return (\n    <Dialog fullScreen={window.innerWidth < 667} open={word != null} onClose={() => { }} TransitionComponent={Transition}>\n      <AppBar className={classes.appBar}>\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n            <CloseIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            {toProperCase(word.word)} {word.pronounce && <span> - {word.pronounce}</span>}\n          </Typography>\n          <Button autoFocus color=\"inherit\" onClick={handleClose}>\n            Back\n            </Button>\n        </Toolbar>\n      </AppBar>\n      <Box className={classes.innerBox}>\n        <LinkInterceptor\n          html={word.content}\n          onLinkClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\n            e.preventDefault();\n          }}></LinkInterceptor>\n      </Box>\n    </Dialog>\n  )\n}","export enum ApiResponseTypes {\n  Success = \"success\",\n  Error = \"error\"\n}\nexport interface IApiResponse<T> {\n  data?: T\n  resultType: ApiResponseTypes,\n  errorMessage?: string;\n}","export const constants = {\n  RESOURCE_URL: process.env.REACT_APP_RESOURCE_URL || \"https://samuraitruong.github.io/open-vn-en-dict\",\n  DATA_SOURCE_ID: [\"data\", \"html\"]\n}\nexport default constants;","import { IApiResponse, ApiResponseTypes } from \"models/IApiResponse\";\nimport { constants } from \"../constants\";\n\nexport async function fetchWord(word: string, source: string): Promise<IApiResponse<any>> {\n  source = source || \"html\";\n  let result: IApiResponse<any> = {\n    resultType: ApiResponseTypes.Success\n  }\n  try {\n    word = word.toLocaleLowerCase().trim();\n    const response = await fetch(`${constants.RESOURCE_URL}/${source}/${word}.json`);\n    let text = await response.text();\n    text = text.replace(\n      /find\\?type=(\\d+)&amp;query=([^\"]*)/ig,\n      \"$2\"\n    );\n    result.data = JSON.parse(text);\n  }\n  catch (err) {\n    console.log(err);\n    result.resultType = ApiResponseTypes.Error;\n    result.errorMessage = \"failed to fetch word\";\n  }\n  return result;\n}","import React, { useState, FormEvent, useEffect, useCallback } from \"react\";\n\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\"\n\nimport SuggestionList from 'components/SuggestionList'\n\nimport Typography from \"@material-ui/core/Typography\";\n\nimport Box from \"@material-ui/core/Box\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Paper from \"@material-ui/core/Paper\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport InputBase from \"@material-ui/core/InputBase\"\nimport Divider from \"@material-ui/core/Divider\"\nimport Chip from \"@material-ui/core/Chip\"\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\"\n\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport DirectionsIcon from \"@material-ui/icons/Directions\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport TranslateIcon from \"@material-ui/icons/Translate\";\nimport SwapHorizIcon from \"@material-ui/icons/SwapHoriz\";\nimport AccountTreeIcon from \"@material-ui/icons/AccountTree\";\nimport VolumeDownIcon from \"@material-ui/icons/VolumeDown\";\nimport VolumeUpIcon from \"@material-ui/icons/VolumeUp\";\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport { LinkInterceptor } from \"components/LinkInterceptor\";\nimport { useParams, useHistory } from \"react-router\";\nimport { WordPopup } from \"components/WordPopup/WordPopup\";\nimport { fetchWord } from \"services/api\";\nimport { toProperCase } from \"services/util\";\nimport constants from \"../constants\";\nimport { Menu, MenuItem } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: \"2px 4px\",\n      display: \"flex\",\n      alignItems: \"center\",\n      width: \"100%\"\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1\n    },\n    iconButton: {\n      padding: 10\n    },\n    divider: {\n      height: 1,\n      marginTop: theme.spacing(1)\n    },\n    container: {\n      margin: theme.spacing(1, 0)\n    },\n    speakButton: {\n      marginLeft: theme.spacing(3)\n    },\n    snackbar: {\n      backgroundColor: theme.palette.error.dark,\n    }\n  })\n);\n\nconst Home: React.FC = () => {\n  const source = localStorage.getItem(\"SOURCE_ID\") || \"html\";\n  let history = useHistory();\n  const classes = useStyles({});\n  const [sourceId, setSourceId] = useState(source);\n  const [data, setData] = useState();\n  const [popupWord, setPopupWord] = useState(null);\n  const [keyword, setKeyword] = useState(\"\");\n  const [type, setType] = useState(\"en_vn\");\n  const [message, setMessage] = useState(null);\n  const { word } = useParams();\n  const search = useCallback(async (inputKeyword: string) => {\n    if (!inputKeyword) return;\n    const { data } = await fetchWord(inputKeyword, sourceId)\n    if (data) {\n      setType(\"en_vn\");\n      setData(data);\n      setMessage(null);\n      history.push(inputKeyword);\n    }\n    else {\n      setData({});\n      setMessage(\"Xin lỗi, từ bạn tìm kiếm không tồn tại hoặc chưa được cập nhật\")\n    }\n  }, [history, sourceId]);\n  const onWordClick = async (clickedWord: string) => {\n    const response = await fetchWord(clickedWord, sourceId);\n    if (response.data && response.data.en_vn && response.data.en_vn.data) {\n      setPopupWord(response.data.en_vn.data)\n    }\n  }\n  useEffect(() => {\n    setKeyword(word);\n    search(word);\n  }, [word, search])\n\n  const dict = data && (data as any)[type];\n  const handleTypeChange = (\n    event: React.MouseEvent<HTMLElement>,\n    newAlignment: string\n  ) => {\n    setType(newAlignment);\n  };\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    search(keyword);\n    return false;\n  };\n  const playSound = (word?: string, accent?: \"us\" | \"uk\") => {\n    const url = `${constants.RESOURCE_URL}/voice/${word.toLocaleLowerCase()}_${accent}.mp3`;\n    const audio = new Audio(url);\n    audio.play();\n  };\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const handleSourceMenuClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = (value?: string) => {\n    if (constants.DATA_SOURCE_ID.some(x => x=== value)) {\n      localStorage.setItem(\"SOURCE_ID\", value);\n      setSourceId(value)\n    }\n    setAnchorEl(null);\n  };\n  return (\n    <React.Fragment>\n      <Grid container className={classes.container}>\n        <Grid item sm={6} xs={12}>\n          <form onSubmit={handleSubmit}>\n            <Paper className={classes.root}>\n              <IconButton className={classes.iconButton} aria-label=\"menu\" onClick={handleSourceMenuClick} >\n                <MenuIcon />\n              </IconButton>\n              <Menu\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n              >\n                <MenuItem disabled={sourceId === \"html\"} onClick={() => handleClose(\"html\")}>Từ điển 1</MenuItem>\n                <MenuItem disabled={sourceId === \"data\"} onClick={() => handleClose(\"data\")}>Từ điển 2</MenuItem>\n              </Menu>\n              <InputBase\n                value={keyword}\n                onChange={e => setKeyword(e.target.value)}\n                className={classes.input}\n                placeholder=\"English -> Vietnamese\"\n                inputProps={{ \"aria-label\": \"English -> Vietnamese\" }}\n              />\n              <IconButton\n                type=\"submit\"\n                className={classes.iconButton}\n                aria-label=\"search\"\n              >\n                <SearchIcon />\n              </IconButton>\n              <Divider className={classes.divider} orientation=\"vertical\" />\n              <IconButton\n                color=\"primary\"\n                className={classes.iconButton}\n                aria-label=\"directions\"\n              >\n                <DirectionsIcon />\n              </IconButton>\n            </Paper>\n          </form>\n        </Grid>\n        <Grid item sm={6} xs={12}>\n          <ToggleButtonGroup\n            value={type}\n            exclusive\n            onChange={handleTypeChange}\n            style={{ float: \"right\" }}\n            aria-label=\"text alignment\"\n          >\n            <ToggleButton value=\"en_vn\" aria-label=\"left aligned\">\n              <TranslateIcon></TranslateIcon> Eng -> Vi &nbsp;\n              </ToggleButton>\n            <ToggleButton value=\"en_en\" aria-label=\"centered\">\n              <SwapHorizIcon /> Eng -> Eng &nbsp;\n              </ToggleButton>\n            <ToggleButton value=\"synonyms\" aria-label=\"right aligned\">\n              <AccountTreeIcon /> Đồng Nghĩa\n              </ToggleButton>\n          </ToggleButtonGroup>\n        </Grid>\n      </Grid>\n\n      {dict && (\n        <Grid>\n          <Grid xs={12} item>\n            <Typography variant=\"h3\" component=\"span\">\n              {dict.data ? toProperCase(dict.data.word) : \"\"}\n            </Typography>\n            <Typography variant=\"h4\" component=\"span\">\n              <Box color=\"grey\" component=\"span\">\n                {dict.data && dict.data.pronounce ? `(${dict.data.pronounce})` : \"\"}\n              </Box>\n            </Typography>\n            <Box component=\"span\" className=\"float-right\">\n              <Chip\n                className={classes.speakButton}\n                clickable\n                color=\"primary\"\n                onClick={() => playSound(dict.data.word, \"us\")}\n                icon={<VolumeDownIcon />}\n                label=\"US\"\n              />\n              <Chip\n                className={classes.speakButton}\n                clickable\n                color=\"secondary\"\n                onClick={() => playSound(dict.data.word, \"uk\")}\n                icon={<VolumeUpIcon />}\n                label=\"UK\"\n              />\n            </Box>\n            <Divider className={classes.divider} />\n            <LinkInterceptor\n              html={dict.data && dict.data.content}\n              onWordClick={onWordClick}\n              onLinkClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\n                e.preventDefault();\n                const arr = e.currentTarget.href.split(\"/\");\n                const word = arr[arr.length - 1];\n                setKeyword(word);\n                search(word);\n              }}\n            />\n            {popupWord && <WordPopup word={popupWord} onClose={() => setPopupWord(null)}></WordPopup>}\n            {dict.suggests && (\n              <Grid>\n                <SuggestionList\n                  suggests={dict.suggests}\n                  setKeyword={setKeyword}\n                  search={search}\n                />\n              </Grid>\n            )}\n          </Grid>\n        </Grid>\n      )}\n\n      {message && (\n        <SnackbarContent className={classes.snackbar} message={message} action={<IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={() => setMessage(null)}>\n          <CloseIcon />\n        </IconButton>} />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport ThemeProvider from './ThemeProvider'\nimport AppBar from 'components/AppBar'\nimport Home from \"containers/Home\"\nimport Container from \"@material-ui/core/Container\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\nconst App: React.FC = () => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <ThemeProvider>\n        <Container fixed  className=\"container-wrapper\">\n          <AppBar />\n          <Container>\n          <Switch>\n            <Route path=\"/:word\">\n              <Home />\n            </Route>\n            <Route path=\"\">\n              <Home />\n            </Route>\n            </Switch>\n            </Container>\n        </Container>\n      </ThemeProvider>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'common/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}