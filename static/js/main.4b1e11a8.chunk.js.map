{"version":3,"sources":["common/ThemeProvider/index.tsx","components/AppBar/index.tsx","components/SuggestionList/index.tsx","components/LinkInterceptor.tsx","common/Home.tsx","common/App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","Theme","children","CssBaseline","ThemeProvider","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","SuggestionList","suggests","setKeyword","search","classes","useStyles","successtionBox","paddingTop","length","Box","className","suggestList","Divider","component","style","marginTop","List","map","item","ListItem","key","word","button","onClick","ListItemIcon","ListItemText","primary","makeStyles","backgroundColor","palette","background","paper","spacing","LinkInterceptor","html","onLinkClick","ref","useRef","listeners","useEffect","Array","from","current","querySelectorAll","forEach","node","addEventListener","push","removeEventListener","dangerouslySetInnerHTML","__html","createStyles","root","padding","display","alignItems","width","input","marginLeft","flex","iconButton","divider","height","container","margin","speakButton","snackbar","error","dark","Home","history","useHistory","useState","data","setData","keyword","type","setType","message","setMessage","useParams","useCallback","inputKeyword","a","fetch","toLocaleLowerCase","ft","json","console","log","dict","playSound","accent","url","Audio","play","content","replace","Fragment","Grid","sm","xs","onSubmit","e","preventDefault","Paper","InputBase","value","onChange","target","placeholder","inputProps","orientation","ToggleButtonGroup","exclusive","event","newAlignment","float","ToggleButton","pronounce","Chip","clickable","icon","label","arr","currentTarget","href","split","SnackbarContent","action","App","basename","process","Container","fixed","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b1e11a8.chunk.js","sourcesContent":["import React from \"react\"\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\n\nconst theme = createMuiTheme()\n\nconst Theme: React.FC = ({ children }) => {\n  return (\n    <>\n      <CssBaseline />\n      <ThemeProvider theme={theme}>\n        {children}\n      </ThemeProvider>\n    </>\n  )\n}\n\nexport default Theme\n\n\n\n","import React from \"react\"\n\nimport MuiAppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\n\nimport MenuBookIcon from '@material-ui/icons/MenuBook'\n\nconst AppBar: React.FC = () => {\n  return (\n    <MuiAppBar position=\"static\">\n      <Toolbar>\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n          <MenuBookIcon />\n        </IconButton>\n        <Typography variant=\"h6\">Vietnamese - English open dictionary</Typography>\n      </Toolbar>\n    </MuiAppBar>\n  )\n}\n\nexport default AppBar","import React from 'react'\n\nimport { makeStyles, Theme } from \"@material-ui/core/styles\"\n\nimport Typography from \"@material-ui/core/Typography\"\nimport List from \"@material-ui/core/List\"\nimport ListItem from \"@material-ui/core/ListItem\"\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\"\nimport ListItemText from \"@material-ui/core/ListItemText\"\nimport LabelImportantIcon from \"@material-ui/icons/LabelImportant\"\nimport { Box, Divider } from '@material-ui/core'\n\ninterface SuggestionListProps {\n  suggests: any[],\n  setKeyword?: any\n  search?: any\n}\n\nconst SuggestionList: React.FC<SuggestionListProps> = ({ suggests, setKeyword, search }) => {\n  const classes = useStyles({ successtionBox: {paddingTop: \"25px\"}})\n \n  return suggests && suggests.length >0 && (\n    <Box className= {classes.suggestList}>\n      <Divider/>\n      <Typography variant=\"h3\" component=\"h5\" style={{marginTop:\"25px\"}}>\n        Từ liên quan:\n      </Typography>\n      <List\n        component=\"nav\"\n        aria-label=\"contacts\"\n      >\n        {suggests.map((item: any) => (\n          <ListItem\n            key={item.word}\n            button\n            onClick={() => {\n              setKeyword(item.word)\n              search(item.word)\n            }}\n          >\n            <ListItemIcon>\n              <LabelImportantIcon />\n            </ListItemIcon>\n            <ListItemText primary={item.word} color=\"primary\" />\n          </ListItem>\n        ))}\n      </List>\n    </Box>\n  )\n}\n\nexport default SuggestionList\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  suggestList: {\n    backgroundColor: theme.palette.background.paper,\n    marginTop: theme.spacing(5)\n  }\n}))","import React, { useEffect, useRef } from 'react'\nimport { Typography } from '@material-ui/core'\n\nexport function LinkInterceptor({ html, onLinkClick = () => { } }: { html: string, onLinkClick: (e: any) => void }) {\n  const ref = useRef(null)\n  const listeners = useRef([])\n\n  useEffect(\n    () => {\n      const links: HTMLElement[] = Array.from(ref.current.querySelectorAll('a'))\n      links.forEach(node => {\n        node.addEventListener('click', onLinkClick)\n        listeners.current.push(node)\n      })\n\n      return () => {\n        listeners.current.forEach(node =>\n          node.removeEventListener('click', onLinkClick)\n        )\n        listeners.current = []\n      }\n    },\n    [html, onLinkClick]\n  )\n\n  return <Typography ref={ref} variant=\"body1\" component=\"article\" dangerouslySetInnerHTML={{ __html: html }}></Typography>\n}","import React, { useState, FormEvent, useEffect, useCallback } from \"react\";\n\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\"\n\nimport SuggestionList from 'components/SuggestionList'\n\nimport Typography from \"@material-ui/core/Typography\";\n\nimport Box from \"@material-ui/core/Box\"\nimport Grid from \"@material-ui/core/Grid\"\nimport Paper from \"@material-ui/core/Paper\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport InputBase from \"@material-ui/core/InputBase\"\nimport Divider from \"@material-ui/core/Divider\"\nimport Chip from \"@material-ui/core/Chip\"\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\"\n\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport DirectionsIcon from \"@material-ui/icons/Directions\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport TranslateIcon from \"@material-ui/icons/Translate\";\nimport SwapHorizIcon from \"@material-ui/icons/SwapHoriz\";\nimport AccountTreeIcon from \"@material-ui/icons/AccountTree\";\nimport VolumeDownIcon from \"@material-ui/icons/VolumeDown\";\nimport VolumeUpIcon from \"@material-ui/icons/VolumeUp\";\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport { LinkInterceptor } from \"components/LinkInterceptor\";\nimport { useParams, useHistory } from \"react-router\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: \"2px 4px\",\n      display: \"flex\",\n      alignItems: \"center\",\n      width: \"100%\"\n    },\n    input: {\n      marginLeft: theme.spacing(1),\n      flex: 1\n    },\n    iconButton: {\n      padding: 10\n    },\n    divider: {\n      height: 1,\n      marginTop: theme.spacing(1)\n    },\n    container: {\n      margin: theme.spacing(1, 0)\n    },\n    speakButton: {\n      marginLeft: theme.spacing(3)\n    },\n    snackbar: {\n      backgroundColor: theme.palette.error.dark,\n    }\n  })\n);\n\nconst Home: React.FC = () => {\n  let history = useHistory();\n  const classes = useStyles({});\n  const [data, setData] = useState({});\n  const [keyword, setKeyword] = useState(\"\");\n  const [type, setType] = useState(\"en_vn\");\n  const [message, setMessage] = useState(null);\n  // const match = useRouteMatch(\"/:word\");\n  const {word} = useParams();\n\n  \n  const search = useCallback(async (inputKeyword) => {\n    try {\n      const ft = await fetch(\n        `https://samuraitruong.github.io/open-vn-en-dict/html/${inputKeyword.toLocaleLowerCase()}.json`\n      );\n      const json = await ft.json();\n      setType(\"en_vn\");\n      setData(json);\n      setMessage(null);\n      history.push(inputKeyword);\n    } catch {\n      console.log(\"error loading data\");\n      setData({});\n      setMessage(\"Xin lỗi, từ bạn tìm kiếm không tồn tại hoặc chưa được cập nhật\")\n    }\n  }, [history]);\n\n  useEffect(() => {\n    setKeyword(word);\n    search(word);\n  }, [word,search])\n\n  const dict = (data as any)[type];\n  const handleTypeChange = (\n    event: React.MouseEvent<HTMLElement>,\n    newAlignment: string\n  ) => {\n    setType(newAlignment);\n  };\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    console.log(\"aa\")\n    search(keyword);\n\n    return false;\n  };\n  const playSound = (word?: string, accent?: \"us\" | \"uk\") => {\n    const url = `https://samuraitruong.github.io/open-vn-en-dict/voice/${word.toLocaleLowerCase()}_${accent}.mp3`;\n    const audio = new Audio(url);\n    audio.play();\n  };\n  if (dict && dict.data && dict.data.content) {\n    dict.data.content = dict.data.content.replace(\n      /find\\?type=(\\d+)&amp;query=(.*)/gi,\n      \"$2\"\n    );\n  }\n  return (\n      <React.Fragment>\n        <Grid container className={classes.container}>\n          <Grid item sm={6} xs={12}>\n            <form onSubmit={handleSubmit}>\n              <Paper className={classes.root}>\n                <IconButton className={classes.iconButton} aria-label=\"menu\">\n                  <MenuIcon />\n                </IconButton>\n                <InputBase\n                  value={keyword}\n                  onChange={e => setKeyword(e.target.value)}\n                  className={classes.input}\n                  placeholder=\"English -> Vietnamese\"\n                  inputProps={{ \"aria-label\": \"English -> Vietnamese\" }}\n                />\n                <IconButton\n                  type=\"submit\"\n                  className={classes.iconButton}\n                  aria-label=\"search\"\n                >\n                  <SearchIcon />\n                </IconButton>\n                <Divider className={classes.divider} orientation=\"vertical\" />\n                <IconButton\n                  color=\"primary\"\n                  className={classes.iconButton}\n                  aria-label=\"directions\"\n                >\n                  <DirectionsIcon />\n                </IconButton>\n              </Paper>\n            </form>\n          </Grid>\n          <Grid item sm={6} xs={12}>\n            <ToggleButtonGroup\n              value={type}\n              exclusive\n              onChange={handleTypeChange}\n              style={{ float: \"right\" }}\n              aria-label=\"text alignment\"\n            >\n              <ToggleButton value=\"en_vn\" aria-label=\"left aligned\">\n                <TranslateIcon></TranslateIcon> Eng -> Vi &nbsp;\n              </ToggleButton>\n              <ToggleButton value=\"en_en\" aria-label=\"centered\">\n                <SwapHorizIcon /> Eng -> Eng &nbsp;\n              </ToggleButton>\n              <ToggleButton value=\"synonyms\" aria-label=\"right aligned\">\n                <AccountTreeIcon /> Đồng Thanh\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </Grid>\n        </Grid>\n        {dict && (\n          <Grid>\n            <Grid xs={12} item>\n              <Typography variant=\"h3\" component=\"span\">\n                {dict.data ? dict.data.word : \"\"}\n              </Typography>\n              <Typography variant=\"h4\" component=\"span\">\n                <Box color=\"grey\" component=\"span\">\n                  {dict.data ? `(${dict.data.pronounce})` : \"\"}\n                </Box>\n              </Typography>\n              <Box component=\"span\" className=\"float-right\">\n                <Chip\n                  className={classes.speakButton}\n                  clickable\n                  color=\"primary\"\n                  onClick={() => playSound(dict.data.word, \"us\")}\n                  icon={<VolumeDownIcon />}\n                  label=\"US\"\n                />\n                <Chip\n                  className={classes.speakButton}\n                  clickable\n                  color=\"secondary\"\n                  onClick={() => playSound(dict.data.word, \"uk\")}\n                  icon={<VolumeUpIcon />}\n                  label=\"UK\"\n                />\n              </Box>\n              <Divider className={classes.divider} />\n              <LinkInterceptor\n                html={dict.data && dict.data.content}\n                onLinkClick={(e: React.MouseEvent<HTMLAnchorElement>) => {\n                  e.preventDefault();\n                  const arr = e.currentTarget.href.split(\"/\");\n                  const word = arr[arr.length - 1];\n                  setKeyword(word);\n                  search(word);\n                }}\n              />\n              {dict.suggests && (\n                <Grid>\n                  <SuggestionList\n                    suggests={dict.suggests}\n                    setKeyword={setKeyword}\n                    search={search}\n                  />\n                </Grid>\n              )}\n            </Grid>\n          </Grid>\n        )}\n\n        {message && (\n          <SnackbarContent className={classes.snackbar} message={message} action={<IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={() => setMessage(null)}>\n            <CloseIcon />\n          </IconButton>} />\n        )}\n    </React.Fragment>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport ThemeProvider from './ThemeProvider'\nimport AppBar from 'components/AppBar'\nimport Home from \"common/Home\"\nimport Container from \"@material-ui/core/Container\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\nconst App: React.FC = () => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <ThemeProvider>\n        <Container fixed  className=\"container-wrapper\">\n          <AppBar />\n          <Container>\n          <Switch>\n            <Route path=\"/:word\">\n              <Home />\n            </Route>\n            <Route path=\"\">\n              <Home />\n            </Route>\n            </Switch>\n            </Container>\n        </Container>\n      </ThemeProvider>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'common/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}